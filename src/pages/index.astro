---
import Layout from "../components/Layout.astro";
---

<Layout>
    <h1>Web Monetization<br/>Playground</h1>
    <div class="form-wrapper">
        <form id="walletAddressForm">
            <div class="form-field">
                <label for="walletAddressUrl">Wallet address URL</label>
                <input type="url" id="walletAddressUrl" name="walletAddressUrl"  required>
            </div>
            <button full-width type="submit">Add monetization link</button>
        </form>
    </div>
    <div id="link-events"></div>
</Layout>

<style>
    .form-wrapper {
        display: flex;
        flex-direction: column;
        align-items: center;
        margin-block-start: 2rem;
        margin-inline: auto;
        max-width: 756px;

        form {
            min-width: 378px;
        }
    }

    .form-field {
        display: flex;
        flex-direction: column;
        margin-block-end: 1rem;

        label {
            white-space: nowrap;
            margin-block-end: 0.25rem;
        }

        .form-field-error {
            margin-block-start: .5rem;
            color: red;
        }
    }

    input {
        border: 1px solid var(--accent);
        border-radius: .375rem;
        padding: .5rem;
        background-color: transparent;
        transition: box-shadow ease-in-out .2s,border-color ease-in-out .2s;
        color: var(--text);
    }

    button {
        display: inline-block;
        border: 2px solid transparent; 
        background-color: var(--button-background);
        color: var(--button-text);
        padding: .75rem;
        border-radius: .375rem;
        cursor: pointer;
        text-decoration: underline;
        text-decoration-color: transparent;
        text-underline-offset: 2px;
        transition: text-decoration-color .2s ease-in-out;

        &[full-width] {
            width: 100%;
        }

        &:hover {
            text-decoration-color: currentcolor;
        }
    }

    #link-events {
        display: grid;
        gap: 2rem;
        grid-template-columns: repeat(auto-fit, minmax(30ch, 1fr));;
        margin-block-start: 2rem;

        div[data-wallet-address] {
            height: 16rem;
            overflow: auto;
            border-radius: .5rem;
            border: 2px solid var(--black);
            padding: .5rem;

            & .log-header {
                display: flex;
                align-items: center;
                justify-content: space-between;
                flex-direction: row;
            }

            & .actions {
                display: flex;
                gap: 1rem;
            }

            & .amount {
                margin-block-end: 0.5rem;
            }

            & ul.events {
                padding-inline-start: 0.5rem;
                list-style: none;
            }
        }
    }

    @media screen and (min-width: 768px) {
        main {
            padding: 2rem;
        }

        #link-events {
            padding-inline: 2rem;
        }
    }

    @media screen and (max-width: 768px) {

        #link-events {
            div[data-wallet-address] {
                & .log-header { 
                    align-items: flex-start;
                    flex-direction: column; 
                }
            } 
        }
    }
</style>

<script>

    /**
        * TIMESTAMPS FOR EVENTS
        * DISABLED
        * REMOVE
        * TOTAL RECEIVED AMOUNT (POLL INCOMING PAYMENT)
    */
    const form = document.querySelector("#walletAddressForm") as HTMLFormElement;
    const linkEvents = document.querySelector("#link-events") as HTMLDivElement;

    async function createLinkTag(href: string) {
        const link = document.createElement('link')

        link.rel = "monetization"
        link.href = href;
        link.addEventListener("monetization", onMonetizationListener)
        link.addEventListener("load", onLoadListener);
        link.addEventListener("error", onErrorListener);
        link.dataset.walletAddress = href;

        document.head.append(link)
    }

    async function createLinkEventLog(href: string) {
        const response = await fetch(href, {
            method: 'GET', 
            credentials: 'omit',
            headers: {
                Accept: 'application/json'
            }
        })
        const walletAddress = await response.json() as { assetCode: string , assetScale: number }

        const header= document.createElement('div')
        header.classList.add('log-header');

        const title = document.createElement('h4');
        title.textContent = href; 

        const actions = document.createElement('div');
        actions.classList.add('actions');

        const disableButton = document.createElement('button');
        disableButton.textContent = "Disable";

        const removeButton = document.createElement('button');
        removeButton.textContent = "Remove";

        actions.append(disableButton);
        actions.append(removeButton);


        header.append(title);
        header.append(actions);

        const eventLog = document.createElement('div');
        eventLog.dataset.walletAddress = href
        eventLog.dataset.assetCode = walletAddress.assetCode
        eventLog.dataset.assetScale = walletAddress.assetScale.toString()

        const events = document.createElement('ul');
        events.classList.add('events');

        eventLog.append(header);
        eventLog.append(events);

        linkEvents.append(eventLog);
    }

    function getLinkEventLog(event: Event): HTMLDivElement | null {
        if (!(event.target instanceof HTMLLinkElement)) return null
        if (!event.target.isConnected) return null

        return document.querySelector(`#link-events div[data-wallet-address='${event.target.dataset.walletAddress}'] ul.events`) as HTMLDivElement;
    }

    function capitalize(str: string) {
        return str.charAt(0).toUpperCase() + str.slice(1);
    }

    function createLog(div: HTMLDivElement, type: string, monetization?: Pick<MonetizationEvent, 'amountSent'>) {
        const log = document.createElement("li");
        const time = new Date().toLocaleTimeString();
        let content = `[${time}] ${capitalize(type)} Event`;

        if(monetization) {
            content += ` - ${monetization.amountSent.value} ${monetization.amountSent.currency}`
        }

        log.textContent = content;
        div.append(log)
    }

    function onMonetizationListener(event: MonetizationEvent) {
        const linkEventLog = getLinkEventLog(event);
        if(!linkEventLog) return;

        if(linkEventLog.dataset.incomingPayment !== event.incomingPayment) {
            linkEventLog.dataset.incomingPayment = event.incomingPayment;
        }

        createLog(linkEventLog, event.type, { amountSent: event.amountSent });
    }

    function onLoadListener(event: Event) {
        const linkEventLog = getLinkEventLog(event);
        if(!linkEventLog) return;

        createLog(linkEventLog, event.type);
    }

    function onErrorListener(event: Event) {
        const linkEventLog = getLinkEventLog(event);
        if(!linkEventLog) return;

        createLog(linkEventLog, event.type);
    }

    form.addEventListener('submit', async (e) => {
        e.preventDefault();

        const input = form.querySelector('input');
        const formData = new FormData(form)
        const walletAddressUrl = formData.get('walletAddressUrl')?.valueOf();

        if(!walletAddressUrl || typeof walletAddressUrl !== "string") {
            input?.setCustomValidity('Please fill the wallet address URL field.')
            return false;
        }

        const walletAddressElement = document.querySelector(`[data-wallet-address='${walletAddressUrl}']`)
        if(walletAddressElement) {
            input?.setCustomValidity(`${walletAddressUrl} already exists in the page.`)
            input?.reportValidity();
            return false;
        }

        createLinkTag(walletAddressUrl);
        await createLinkEventLog(walletAddressUrl)
        form.reset();
        return false;
    })
</script>
